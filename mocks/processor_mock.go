/**
 * Copyright (c) 2017 Intel Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Automatically generated by MockGen. DO NOT EDIT!
// Source: engine/processor/processor.go

package mocks

import (
	gomock "github.com/golang/mock/gomock"
	models0 "github.com/trustedanalytics-ng/tap-catalog/models"
	models "github.com/trustedanalytics-ng/tap-container-broker/models"
	model "github.com/trustedanalytics-ng/tap-template-repository/model"
)

// Mock of ServiceProcessor interface
type MockServiceProcessor struct {
	ctrl     *gomock.Controller
	recorder *_MockServiceProcessorRecorder
}

// Recorder for MockServiceProcessor (not exported)
type _MockServiceProcessorRecorder struct {
	mock *MockServiceProcessor
}

func NewMockServiceProcessor(ctrl *gomock.Controller) *MockServiceProcessor {
	mock := &MockServiceProcessor{ctrl: ctrl}
	mock.recorder = &_MockServiceProcessorRecorder{mock}
	return mock
}

func (_m *MockServiceProcessor) EXPECT() *_MockServiceProcessorRecorder {
	return _m.recorder
}

func (_m *MockServiceProcessor) GetCatalogEntityWithK8sTemplate(request models.CatalogEntityWithK8sTemplateRequest) (models.CatalogEntityWithK8sTemplate, models.DeployResponseStatus, int, error) {
	ret := _m.ctrl.Call(_m, "GetCatalogEntityWithK8sTemplate", request)
	ret0, _ := ret[0].(models.CatalogEntityWithK8sTemplate)
	ret1, _ := ret[1].(models.DeployResponseStatus)
	ret2, _ := ret[2].(int)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

func (_mr *_MockServiceProcessorRecorder) GetCatalogEntityWithK8sTemplate(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetCatalogEntityWithK8sTemplate", arg0)
}

func (_m *MockServiceProcessor) GetInstanceCatalogEntityWithK8STemplate(request models.CatalogEntityWithK8sTemplateRequest, instance models0.Instance) (models.CatalogEntityWithK8sTemplate, models.DeployResponseStatus, int, error) {
	ret := _m.ctrl.Call(_m, "GetInstanceCatalogEntityWithK8STemplate", request, instance)
	ret0, _ := ret[0].(models.CatalogEntityWithK8sTemplate)
	ret1, _ := ret[1].(models.DeployResponseStatus)
	ret2, _ := ret[2].(int)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

func (_mr *_MockServiceProcessorRecorder) GetInstanceCatalogEntityWithK8STemplate(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetInstanceCatalogEntityWithK8STemplate", arg0, arg1)
}

func (_m *MockServiceProcessor) LinkInstances(srcData models.CatalogEntityWithK8sTemplate, dstData models.CatalogEntityWithK8sTemplate, isBindOperation bool) error {
	ret := _m.ctrl.Call(_m, "LinkInstances", srcData, dstData, isBindOperation)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockServiceProcessorRecorder) LinkInstances(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "LinkInstances", arg0, arg1, arg2)
}

func (_m *MockServiceProcessor) MonitorInstanceDeployments(instance models0.Instance) error {
	ret := _m.ctrl.Call(_m, "MonitorInstanceDeployments", instance)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockServiceProcessorRecorder) MonitorInstanceDeployments(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "MonitorInstanceDeployments", arg0)
}

func (_m *MockServiceProcessor) ProcessHook(hookType model.HookType, data models.CatalogEntityWithK8sTemplate) (map[string]string, *models0.Instance, error) {
	ret := _m.ctrl.Call(_m, "ProcessHook", hookType, data)
	ret0, _ := ret[0].(map[string]string)
	ret1, _ := ret[1].(*models0.Instance)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

func (_mr *_MockServiceProcessorRecorder) ProcessHook(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ProcessHook", arg0, arg1)
}

func (_m *MockServiceProcessor) StartInstance(instanceId string, data models.CatalogEntityWithK8sTemplate) error {
	ret := _m.ctrl.Call(_m, "StartInstance", instanceId, data)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockServiceProcessorRecorder) StartInstance(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "StartInstance", arg0, arg1)
}

func (_m *MockServiceProcessor) StopInstance(instanceId string, data models.CatalogEntityWithK8sTemplate) error {
	ret := _m.ctrl.Call(_m, "StopInstance", instanceId, data)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockServiceProcessorRecorder) StopInstance(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "StopInstance", arg0, arg1)
}

func (_m *MockServiceProcessor) ScaleOnKubernetes(instanceId string, data models.CatalogEntityWithK8sTemplate, stateToUpdateBeforeScale models0.InstanceState) error {
	ret := _m.ctrl.Call(_m, "ScaleOnKubernetes", instanceId, data, stateToUpdateBeforeScale)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockServiceProcessorRecorder) ScaleOnKubernetes(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ScaleOnKubernetes", arg0, arg1, arg2)
}

func (_m *MockServiceProcessor) UpdateInstanceState(instanceId string, message string, currentState models0.InstanceState, stateToSet models0.InstanceState) (int, error) {
	ret := _m.ctrl.Call(_m, "UpdateInstanceState", instanceId, message, currentState, stateToSet)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockServiceProcessorRecorder) UpdateInstanceState(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "UpdateInstanceState", arg0, arg1, arg2, arg3)
}

func (_m *MockServiceProcessor) UpdateStateAndGetInstance(instanceId string, message string, currentState models0.InstanceState, stateToSet models0.InstanceState) (models0.Instance, int, error) {
	ret := _m.ctrl.Call(_m, "UpdateStateAndGetInstance", instanceId, message, currentState, stateToSet)
	ret0, _ := ret[0].(models0.Instance)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

func (_mr *_MockServiceProcessorRecorder) UpdateStateAndGetInstance(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "UpdateStateAndGetInstance", arg0, arg1, arg2, arg3)
}

func (_m *MockServiceProcessor) UpdateInstance(instanceId string, field string, valueToUpdate interface{}, operation models0.PatchOperation) (models0.Instance, int, error) {
	ret := _m.ctrl.Call(_m, "UpdateInstance", instanceId, field, valueToUpdate, operation)
	ret0, _ := ret[0].(models0.Instance)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

func (_mr *_MockServiceProcessorRecorder) UpdateInstance(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "UpdateInstance", arg0, arg1, arg2, arg3)
}

func (_m *MockServiceProcessor) UpdateServiceStatus(serviceId string, currentState models0.ServiceState, nextState models0.ServiceState) error {
	ret := _m.ctrl.Call(_m, "UpdateServiceStatus", serviceId, currentState, nextState)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockServiceProcessorRecorder) UpdateServiceStatus(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "UpdateServiceStatus", arg0, arg1, arg2)
}

func (_m *MockServiceProcessor) WaitForInstanceDependencies(data models.CatalogEntityWithK8sTemplate) error {
	ret := _m.ctrl.Call(_m, "WaitForInstanceDependencies", data)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockServiceProcessorRecorder) WaitForInstanceDependencies(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "WaitForInstanceDependencies", arg0)
}
